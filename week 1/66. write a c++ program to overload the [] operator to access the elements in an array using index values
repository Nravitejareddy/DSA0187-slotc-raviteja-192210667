#include <iostream>

class Array {
private:
    int* data;
    size_t size;

public:
    // Constructor
    Array(size_t initSize) : size(initSize) {
        data = new int[size];
        for (size_t i = 0; i < size; ++i) {
            data[i] = i + 1; // Initialize array elements with values 1 to size
        }
    }

    // Destructor
    ~Array() {
        delete[] data;
    }

    // Overloading the [] operator as a member function
    int& operator[](size_t index) {
        if (index >= 0 && index < size) {
            return data[index];
        } else {
            std::cerr << "Error: Index out of range." << std::endl;
            exit(EXIT_FAILURE);
        }
    }

    // Function to display array elements
    void displayArray() const {
        for (size_t i = 0; i < size; ++i) {
            std::cout << data[i] << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    // Create an array object
    Array myArray(5);

    // Display original array
    std::cout << "Original array elements:" << std::endl;
    myArray.displayArray();

    // Access array elements using overloaded [] operator
    myArray[2] = 99; // Set the value at index 2

    // Display modified array
    std::cout << "Modified array elements:" << std::endl;
    myArray.displayArray();

    return 0;
}

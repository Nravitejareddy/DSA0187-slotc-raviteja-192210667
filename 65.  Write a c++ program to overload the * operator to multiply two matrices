#include <iostream>
#include <vector>

class Matrix {
private:
    std::vector<std::vector<int>> data;
    size_t rows;
    size_t cols;

public:
    // Constructor
    Matrix(const std::vector<std::vector<int>>& initData) : data(initData), rows(initData.size()), cols(initData[0].size()) {
    }

    // Overloading the * operator as a member function
    Matrix operator*(const Matrix& other) const {
        // Check if the matrices can be multiplied
        if (cols != other.rows) {
            std::cerr << "Error: Incompatible matrices for multiplication." << std::endl;
            return Matrix({});
        }

        // Create a result matrix
        Matrix result(std::vector<std::vector<int>>(rows, std::vector<int>(other.cols, 0)));

        // Matrix multiplication
        for (size_t i = 0; i < rows; ++i) {
            for (size_t j = 0; j < other.cols; ++j) {
                for (size_t k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }

        return result;
    }

    // Function to display matrix
    void displayMatrix() const {
        for (const auto& row : data) {
            for (int element : row) {
                std::cout << element << " ";
            }
            std::cout << std::endl;
        }
    }
};

int main() {
    // Create two matrices
    Matrix matrix1({{1, 2}, {3, 4}});
    Matrix matrix2({{5, 6}, {7, 8}});

    // Display original matrices
    std::cout << "Matrix 1:" << std::endl;
    matrix1.displayMatrix();
    std::cout << "Matrix 2:" << std::endl;
    matrix2.displayMatrix();

    // Multiply matrices using overloaded * operator
    Matrix result = matrix1 * matrix2;

    // Display the result
    std::cout << "Result of matrix multiplication:" << std::endl;
    result.displayMatrix();

    return 0;
}
